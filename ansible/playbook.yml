- name: Deploy Keycloak + Static Site (Integrated Auth)
  hosts: all
  become: true
  gather_facts: false

  vars_files:
    - vars/keycloak_vars.yml

  pre_tasks:
    - name: Short pause to avoid apt lock issues in GitHub Actions
      pause:
        seconds: 15

  tasks:
    - name: Install Docker and Docker Compose
      apt:
        name: [docker.io, docker-compose, python3-pip, openssl, certbot, jq]
        state: present
        update_cache: true
        force_apt_get: true
      environment:
        DEBIAN_FRONTEND: noninteractive
      async: 300
      poll: 15

    - name: Install Docker SDK for Python
      pip:
        name: docker

    - name: Create shared Docker network
      community.docker.docker_network:
        name: app_net
        state: present

    - name: Ensure named Docker volume exists
      community.docker.docker_volume:
        name: nginx_pid
        state: present

    - name: Stop NGINX container temporarily for Certbot HTTP-01 challenge
      community.docker.docker_container:
        name: nginx-site
        state: stopped
      ignore_errors: true

    - name: Obtain Let's Encrypt certificate using Certbot standalone
      command: >
        certbot certonly --standalone
        --non-interactive
        --agree-tos
        --email your@email.com
        -d {{ vm_public_hostname }}
      register: certbot_result
      changed_when: "'Congratulations' in certbot_result.stdout or 'Certificate not yet due for renewal' in certbot_result.stdout"

    - name: Start Nginx container again (if it was stopped)
      community.docker.docker_container:
        name: nginx-site
        state: started
      ignore_errors: true

    - name: Run PostgreSQL container
      community.docker.docker_container:
        name: postgres
        image: postgres:14
        env:
          POSTGRES_USER: keycloak
          POSTGRES_PASSWORD: "{{ lookup('env', 'POSTGRES_PASSWORD') }}"
          POSTGRES_DB: keycloak
        ports:
          - "5432:5432"
        volumes:
          - /home/azureuser/postgres_data:/var/lib/postgresql/data
        restart_policy: always
        networks:
          - name: app_net
        detach: true

    - name: Wait for Postgres to become ready
      wait_for:
        host: localhost
        port: 5432
        delay: 5
        timeout: 60
    - name: Copy realm JSON to VM
      copy:
        src: keycloak/hylastix-realm.json
        dest: "/home/{{ ansible_user }}/hylastix-realm.json"
        owner: "{{ ansible_user }}"
        mode: '0644'
    - name: Run Keycloak container with HTTPS hostname and realm import
      community.docker.docker_container:
        name: keycloak
        image: quay.io/keycloak/keycloak:24.0.1
        command: >
          start-dev
          --hostname-strict=false
          --hostname-strict-https=true
          --hostname-url={{ vm_public_url }}
          --hostname-admin-url={{ vm_public_url }}
          --import-realm
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: "{{ lookup('env', 'KEYCLOAK_ADMIN_PASSWORD') }}"
          DB_VENDOR: POSTGRES
          DB_ADDR: host.docker.internal
          DB_DATABASE: keycloak
          DB_USER: keycloak
          DB_PASSWORD: keycloak
        ports:
          - "8080:8080"
        volumes:
          - /home/{{ ansible_user }}/hylastix-realm.json:/opt/keycloak/data/import/hylastix-realm.json:ro
        restart_policy: always
        networks:
          - name: app_net
        detach: true

    - name: Wait for Keycloak to become ready by checking container logs
      shell: |
        until docker logs keycloak 2>&1 | grep -q "Running the server in development mode."; do
          echo "Waiting for Keycloak to become ready..."
          sleep 3
        done
      retries: 30
      delay: 3
      register: keycloak_ready
      changed_when: false

    - name: Ensure static site directory exists
      file:
        path: /home/azureuser/site
        state: directory
        mode: '0755'

    - name: Download keycloak.min.js from GitHub CDN
      get_url:
        url: https://cdn.jsdelivr.net/npm/keycloak-js@24.0.1/dist/keycloak.min.js
        dest: /home/azureuser/site/keycloak.min.js

    - name: Generate static site index.html with Keycloak config
      copy:
        dest: /home/azureuser/site/index.html
        content: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <title>Keycloak Protected Static Site</title>
            <script src="keycloak.min.js"></script>
            <script defer src="main.js"></script>
          </head>
          <body>
            <div id="content" style="display: none;">
              <h1>Welcome to the Hylastix Static Webpage!</h1>
              <p>You are authenticated with Keycloak.</p>
              <p id="user-info"></p>
              <button onclick="keycloak.logout()">Logout</button>
              <button id="login-button" style="display:none">Login</button>
            </div>
          </body>
          </html>

    - name: Generate main.js for Keycloak logic
      copy:
        dest: /home/azureuser/site/main.js
        content: |
          const keycloak = new Keycloak({
            url: 'https://{{ vm_public_hostname }}/',
            realm: 'hylastix',
            clientId: '{{ oauth2_client_id }}'
          });

          keycloak.init({
            onLoad: 'login-required',
            checkLoginIframe: false
          }).then(authenticated => {
            document.getElementById("content").style.display = "block";
            document.getElementById("user-info").innerText = `Logged in as: ${keycloak.tokenParsed.preferred_username}`;
          });

    - name: Create Nginx configuration for static site and Keycloak proxy
      copy:
        dest: /home/azureuser/nginx-site.conf
        content: |
          server {
            listen 80;
            server_name {{ vm_public_hostname }};
            return 301 https://$host$request_uri;
          }

          server {
            listen 443 ssl;
            server_name {{ vm_public_hostname }};

            ssl_certificate /etc/letsencrypt/live/{{ vm_public_hostname }}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/{{ vm_public_hostname }}/privkey.pem;

            root /usr/share/nginx/html;
            index index.html;

            location / {
              try_files $uri $uri/ =404;
            }

            location ~ ^/(admin|resources|realms|js|protocol|favicon\.ico|robots\.txt|auth) {
              proxy_pass http://keycloak:8080;
            }
          }

    - name: Run NGINX container
      community.docker.docker_container:
        name: nginx-site
        image: nginx:alpine
        volumes:
          - /home/azureuser/site:/usr/share/nginx/html:ro
          - /home/azureuser/nginx-site.conf:/etc/nginx/conf.d/default.conf:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - nginx_pid:/var/run
        ports:
          - "80:80"
          - "443:443"
        networks:
          - name: app_net
        detach: true
